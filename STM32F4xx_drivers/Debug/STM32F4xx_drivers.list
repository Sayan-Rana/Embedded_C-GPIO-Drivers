
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800068c  08000694  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800068c  0800068c  00010694  2**0
                  CONTENTS
  4 .ARM          00000000  0800068c  0800068c  00010694  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800068c  08000694  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000694  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000694  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010694  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007cd  00000000  00000000  000106be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000217  00000000  00000000  00010e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  000110a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000136c  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a17  00000000  00000000  0001255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000052a6  00000000  00000000  00012f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00018294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000674 	.word	0x08000674

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000674 	.word	0x08000674

080001e8 <delay>:
#include "stm32f407xx.h"
/*
 * Software delay for testing purpose
 */
void delay()
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <delay+0x24>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	0007a11f 	.word	0x0007a11f

08000210 <main>:


int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioled;

	gpioled.pGPIOx = GPIOD;
 8000216:	4b0d      	ldr	r3, [pc, #52]	; (800024c <main+0x3c>)
 8000218:	607b      	str	r3, [r7, #4]
	gpioled.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	gpioled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800021e:	2301      	movs	r3, #1
 8000220:	727b      	strb	r3, [r7, #9]
	gpioled.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000222:	2302      	movs	r3, #2
 8000224:	72bb      	strb	r3, [r7, #10]
	gpioled.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	gpioled.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 800022e:	2101      	movs	r1, #1
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <main+0x3c>)
 8000232:	f000 f837 	bl	80002a4 <GPIO_PeriClockControl>
	GPIO_Init(&gpioled);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f91b 	bl	8000474 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800023e:	210c      	movs	r1, #12
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <main+0x3c>)
 8000242:	f000 f9df 	bl	8000604 <GPIO_ToggleOutputPin>
		delay();
 8000246:	f7ff ffcf 	bl	80001e8 <delay>
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800024a:	e7f8      	b.n	800023e <main+0x2e>
 800024c:	40020c00 	.word	0x40020c00

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	; (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	; (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f9d5 	bl	800062c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffc5 	bl	8000210 <main>

08000286 <LoopForever>:

LoopForever:
    b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	08000694 	.word	0x08000694
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC_IRQHandler>
	...

080002a4 <GPIO_PeriClockControl>:
 *
 *	@note                - none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDis)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
	if(EnOrDis == ENABLE)
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d162      	bne.n	800037c <GPIO_PeriClockControl+0xd8>
	{
		// Enable the clock for given GPIO port address

		if(pGPIOx == GPIOA)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a64      	ldr	r2, [pc, #400]	; (800044c <GPIO_PeriClockControl+0x1a8>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002be:	4b64      	ldr	r3, [pc, #400]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a63      	ldr	r2, [pc, #396]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80002ca:	e0b9      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a61      	ldr	r2, [pc, #388]	; (8000454 <GPIO_PeriClockControl+0x1b0>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002d4:	4b5e      	ldr	r3, [pc, #376]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a5d      	ldr	r2, [pc, #372]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e0ae      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a5c      	ldr	r2, [pc, #368]	; (8000458 <GPIO_PeriClockControl+0x1b4>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002ea:	4b59      	ldr	r3, [pc, #356]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a58      	ldr	r2, [pc, #352]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f6:	e0a3      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a58      	ldr	r2, [pc, #352]	; (800045c <GPIO_PeriClockControl+0x1b8>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000300:	4b53      	ldr	r3, [pc, #332]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a52      	ldr	r2, [pc, #328]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030c:	e098      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a53      	ldr	r2, [pc, #332]	; (8000460 <GPIO_PeriClockControl+0x1bc>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000316:	4b4e      	ldr	r3, [pc, #312]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a4d      	ldr	r2, [pc, #308]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800031c:	f043 0310 	orr.w	r3, r3, #16
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000322:	e08d      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a4f      	ldr	r2, [pc, #316]	; (8000464 <GPIO_PeriClockControl+0x1c0>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800032c:	4b48      	ldr	r3, [pc, #288]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a47      	ldr	r2, [pc, #284]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000338:	e082      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a4a      	ldr	r2, [pc, #296]	; (8000468 <GPIO_PeriClockControl+0x1c4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000342:	4b43      	ldr	r3, [pc, #268]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a42      	ldr	r2, [pc, #264]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034e:	e077      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a46      	ldr	r2, [pc, #280]	; (800046c <GPIO_PeriClockControl+0x1c8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000358:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a3c      	ldr	r2, [pc, #240]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800035e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e06c      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a41      	ldr	r2, [pc, #260]	; (8000470 <GPIO_PeriClockControl+0x1cc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d168      	bne.n	8000440 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800036e:	4b38      	ldr	r3, [pc, #224]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a37      	ldr	r2, [pc, #220]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e061      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a33      	ldr	r2, [pc, #204]	; (800044c <GPIO_PeriClockControl+0x1a8>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000384:	4b32      	ldr	r3, [pc, #200]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a31      	ldr	r2, [pc, #196]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f023 0301 	bic.w	r3, r3, #1
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e056      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a2f      	ldr	r2, [pc, #188]	; (8000454 <GPIO_PeriClockControl+0x1b0>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a2c      	ldr	r2, [pc, #176]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f023 0302 	bic.w	r3, r3, #2
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e04b      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a2b      	ldr	r2, [pc, #172]	; (8000458 <GPIO_PeriClockControl+0x1b4>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a26      	ldr	r2, [pc, #152]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f023 0304 	bic.w	r3, r3, #4
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e040      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <GPIO_PeriClockControl+0x1b8>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a21      	ldr	r2, [pc, #132]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f023 0308 	bic.w	r3, r3, #8
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e035      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a22      	ldr	r2, [pc, #136]	; (8000460 <GPIO_PeriClockControl+0x1bc>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f023 0310 	bic.w	r3, r3, #16
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e02a      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <GPIO_PeriClockControl+0x1c0>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a16      	ldr	r2, [pc, #88]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f023 0320 	bic.w	r3, r3, #32
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e01f      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a19      	ldr	r2, [pc, #100]	; (8000468 <GPIO_PeriClockControl+0x1c4>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000408:	4b11      	ldr	r3, [pc, #68]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a10      	ldr	r2, [pc, #64]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e014      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a14      	ldr	r2, [pc, #80]	; (800046c <GPIO_PeriClockControl+0x1c8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e009      	b.n	8000440 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <GPIO_PeriClockControl+0x1cc>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d105      	bne.n	8000440 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a05      	ldr	r2, [pc, #20]	; (8000450 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40020000 	.word	0x40020000
 8000450:	40023800 	.word	0x40023800
 8000454:	40020400 	.word	0x40020400
 8000458:	40020800 	.word	0x40020800
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40021000 	.word	0x40021000
 8000464:	40021400 	.word	0x40021400
 8000468:	40021800 	.word	0x40021800
 800046c:	40021c00 	.word	0x40021c00
 8000470:	40022000 	.word	0x40022000

08000474 <GPIO_Init>:
 *
 *	@note                - none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 			// Temp. register
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]

	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d81e      	bhi.n	80004c6 <GPIO_Init+0x52>
	{
		// Its a non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing the required bit
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	4619      	mov	r1, r3
 80004a6:	2303      	movs	r3, #3
 80004a8:	408b      	lsls	r3, r1
 80004aa:	43db      	mvns	r3, r3
 80004ac:	4619      	mov	r1, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	400a      	ands	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//Setting the required bit
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	430a      	orrs	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]
	}else{
		// Interrupt mode

	}

	temp = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	799b      	ldrb	r3, [r3, #6]
 80004ce:	461a      	mov	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing the required bit
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	689a      	ldr	r2, [r3, #8]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	4619      	mov	r1, r3
 80004e8:	2303      	movs	r3, #3
 80004ea:	408b      	lsls	r3, r1
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//Setting the required bit
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6899      	ldr	r1, [r3, #8]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	430a      	orrs	r2, r1
 8000506:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]

	// 3. Configure the Pull up Pull down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	79db      	ldrb	r3, [r3, #7]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing the required bit
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	68da      	ldr	r2, [r3, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	4619      	mov	r1, r3
 800052a:	2303      	movs	r3, #3
 800052c:	408b      	lsls	r3, r1
 800052e:	43db      	mvns	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	400a      	ands	r2, r1
 8000538:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	//Setting the required bit
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	68d9      	ldr	r1, [r3, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	430a      	orrs	r2, r1
 8000548:	60da      	str	r2, [r3, #12]

	temp = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7a1b      	ldrb	r3, [r3, #8]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing the required bit
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	4619      	mov	r1, r3
 800056a:	2301      	movs	r3, #1
 800056c:	408b      	lsls	r3, r1
 800056e:	43db      	mvns	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	400a      	ands	r2, r1
 8000578:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	//Setting the required bit
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6859      	ldr	r1, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	430a      	orrs	r2, r1
 8000588:	605a      	str	r2, [r3, #4]

	temp = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d131      	bne.n	80005fa <GPIO_Init+0x186>
	{
		uint8_t temp1, temp2;

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));		//Clearing the required bit
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	7afa      	ldrb	r2, [r7, #11]
 80005ae:	3208      	adds	r2, #8
 80005b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005b4:	7abb      	ldrb	r3, [r7, #10]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	220f      	movs	r2, #15
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	7afa      	ldrb	r2, [r7, #11]
 80005c8:	4001      	ands	r1, r0
 80005ca:	3208      	adds	r2, #8
 80005cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunction << (4 * temp2));	//Setting the required bit
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	7afa      	ldrb	r2, [r7, #11]
 80005d6:	3208      	adds	r2, #8
 80005d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a5b      	ldrb	r3, [r3, #9]
 80005e0:	461a      	mov	r2, r3
 80005e2:	7abb      	ldrb	r3, [r7, #10]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	7afa      	ldrb	r2, [r7, #11]
 80005f2:	4301      	orrs	r1, r0
 80005f4:	3208      	adds	r2, #8
 80005f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <GPIO_ToggleOutputPin>:
 *
 *	@note                - none
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);		// ^ bitwise EXOR operator
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	2101      	movs	r1, #1
 8000618:	fa01 f202 	lsl.w	r2, r1, r2
 800061c:	405a      	eors	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	615a      	str	r2, [r3, #20]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <__libc_init_array>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4e0d      	ldr	r6, [pc, #52]	; (8000664 <__libc_init_array+0x38>)
 8000630:	4c0d      	ldr	r4, [pc, #52]	; (8000668 <__libc_init_array+0x3c>)
 8000632:	1ba4      	subs	r4, r4, r6
 8000634:	10a4      	asrs	r4, r4, #2
 8000636:	2500      	movs	r5, #0
 8000638:	42a5      	cmp	r5, r4
 800063a:	d109      	bne.n	8000650 <__libc_init_array+0x24>
 800063c:	4e0b      	ldr	r6, [pc, #44]	; (800066c <__libc_init_array+0x40>)
 800063e:	4c0c      	ldr	r4, [pc, #48]	; (8000670 <__libc_init_array+0x44>)
 8000640:	f000 f818 	bl	8000674 <_init>
 8000644:	1ba4      	subs	r4, r4, r6
 8000646:	10a4      	asrs	r4, r4, #2
 8000648:	2500      	movs	r5, #0
 800064a:	42a5      	cmp	r5, r4
 800064c:	d105      	bne.n	800065a <__libc_init_array+0x2e>
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000654:	4798      	blx	r3
 8000656:	3501      	adds	r5, #1
 8000658:	e7ee      	b.n	8000638 <__libc_init_array+0xc>
 800065a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800065e:	4798      	blx	r3
 8000660:	3501      	adds	r5, #1
 8000662:	e7f2      	b.n	800064a <__libc_init_array+0x1e>
 8000664:	0800068c 	.word	0x0800068c
 8000668:	0800068c 	.word	0x0800068c
 800066c:	0800068c 	.word	0x0800068c
 8000670:	08000690 	.word	0x08000690

08000674 <_init>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr

08000680 <_fini>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr
